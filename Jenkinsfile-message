#!groovy
import groovy.json.JsonSlurper
import org.java_websocket.drafts.Draft_6455
node {

stage('send report') {
        echo 'Going to create bin'
        def createBody = """
{
  "status": 200,
  "statusText": "OK",
  "httpVersion": "HTTP/1.1",
  "headers": [],
  "cookies": [],
  "content": {
    "mimeType": "text/plain",
    "text": ""
  }
}
        """
        def response = httpRequest(
                httpMode: 'POST',
                url: 'http://mockbin.org/bin/create',
                validResponseCodes: '100:299',
                requestBody: createBody.toString()
        )
 
        def testmesg = httpRequest( 
               httpMode: 'POST', 
               requestBody: '{"messageId":1, "timestamp":5678, "protocolVersion":"1.0.0", "messageData":{"mMX":1234, "mPermGen":34}}', 
               validResponseCodes: '100:299', 
               url: 'http://10.101.1.80:8080/message'
        )
        println "-----------------------"
        println testmesg.content.toString()
    def executeInsideContainer(String command, String containerNameContains){
    def defaultEnvironmentKey = getRancherDefaultEnvironmentKey()
    def containers = getFromRancherApi("/v2-beta/projects/${defaultEnvironmentKey}/containers")
    def containerId = containers.data.find { container -> container.name.contains(containerNameContains) }.id

    def executeUrl = "http://10.101.1.79:8080" + "/v2-beta/projects/${defaultEnvironmentKey}/containers/${containerId}/?action=execute"
    HttpURLConnection connection = (HttpURLConnection) executeUrl.toURL().openConnection()
    connection.setDoOutput(true)
    connection.setRequestMethod("POST")
    connection.setRequestProperty("Authorization", "Basic ${authString}")
    connection.setRequestProperty("Content-Type", "application/json")
    connection.setRequestProperty("Accept", "application/json")
    def data = '{"attachStdin":false, "attachStdout":false, "command":[' + command + '], "tty":false}'
    connection.outputStream << data
    if (connection.getResponseCode() == HttpURLConnection.HTTP_OK ||
        connection.getResponseCode() == HttpURLConnection.HTTP_ACCEPTED ||
        connection.getResponseCode() == HttpURLConnection.HTTP_CREATED) {
    } else {
        String response = (new InputStreamReader(connection.getErrorStream())).readLines().join(" ")
        println "POST URL: " + executeUrl
        throw new IOException("Error during POST request (ResponseCode ${connection.getResponseCode()}): " + response)
    }
    def responseBody = connection.getInputStream().readLines()
    JsonSlurper slurper = new JsonSlurper()
    def slurped = slurper.parseText(responseBody)
    def token = slurped.token
    def websocketUrl = slurped.url
    println "Making request to websocket: " + websocketUrl
    org.java_websocket.client.WebSocketClient mWs = new MyWebSocketClient( new URI( websocketUrl + "?token=" + token ), new Draft_6455(), null, 60)
    def connectionResult = mWs.connectBlocking()
    mWs.close()
    return connectionResult
}


        println "-----------------------"
        def jsonSlrpBody = new JsonSlurper().parseText(response.content)
        println jsonSlrpBody.toString()

        println "-----------------------"
        def jsonSlrpHeaders = response.headers
        println jsonSlrpHeaders

    
}



}

